#pragma version 10

// This TEAL was generated by TEALScript v0.89.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\template.algo.ts:46
	// this.lastRun.value = 0
	byte 0x6c // "l"
	int 0
	app_global_put

	// contracts\template.algo.ts:47
	// this.period.value = 0
	byte 0x70 // "p"
	int 0
	app_global_put

	// contracts\template.algo.ts:48
	// this.start.value = 0
	byte 0x73 // "s"
	int 0
	app_global_put

	// contracts\template.algo.ts:49
	// this.version.value = 'BIATEC-CRON-01-01-01'
	byte 0x7363766572 // "scver"
	byte 0x00144249415445432d43524f4e2d30312d30312d3031
	app_global_put
	retsub

// updateApplication(string,string)void
*abi_route_updateApplication:
	// id: string
	txna ApplicationArgs 2
	extract 2 0

	// version: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string,string)void
	callsub updateApplication
	int 1
	return

// updateApplication(version: string, id: string): void
//
// Creator can update application
updateApplication:
	proto 2 0

	// contracts\template.algo.ts:56
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:57
	// this.version.value = version
	byte 0x7363766572 // "scver"
	frame_dig -1 // version: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts\template.algo.ts:58
	// this.id.value = id
	byte 0x6964 // "id"
	frame_dig -2 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
//
// Creator can delete application
deleteApplication:
	proto 0 0

	// contracts\template.algo.ts:65
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// setPeriod(uint64)void
*abi_route_setPeriod:
	// period: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPeriod(uint64)void
	callsub setPeriod
	int 1
	return

// setPeriod(period: uint64): void
//
// Creator can change the period how ofter the script can be executed by executors
//
// @param period Period in seconds
setPeriod:
	proto 1 0

	// contracts\template.algo.ts:74
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:75
	// this.period.value = period
	byte 0x70 // "p"
	frame_dig -1 // period: uint64
	app_global_put
	retsub

// payment(uint64,address,string)void
*abi_route_payment:
	// note: string
	txna ApplicationArgs 3
	extract 2 0

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute payment(uint64,address,string)void
	callsub payment
	int 1
	return

// payment(amount: uint64, receiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
//
// @param amount Amount
// @param note Note
// @param receiver Receiver
payment:
	proto 3 0

	// contracts\template.algo.ts:86
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:87
	// sendPayment({
	//       amount: amount,
	//       receiver: receiver,
	//       note: note,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\template.algo.ts:88
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts\template.algo.ts:89
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts\template.algo.ts:90
	// note: note
	frame_dig -3 // note: string
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\template.algo.ts:92
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// assetTransfer(uint64,uint64,address,string)void
*abi_route_assetTransfer:
	// note: string
	txna ApplicationArgs 4
	extract 2 0

	// assetReceiver: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetAmount: uint64
	txna ApplicationArgs 2
	btoi

	// xferAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute assetTransfer(uint64,uint64,address,string)void
	callsub assetTransfer
	int 1
	return

// assetTransfer(xferAsset: AssetID, assetAmount: uint64, assetReceiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
// @param xferAsset Asset id
// @param assetAmount Amount
// @param note Note
// @param assetReceiver Receiver
assetTransfer:
	proto 4 0

	// contracts\template.algo.ts:103
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:104
	// sendAssetTransfer({
	//       assetAmount: assetAmount,
	//       assetReceiver: assetReceiver,
	//       xferAsset: xferAsset,
	//       note: note,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\template.algo.ts:105
	// assetAmount: assetAmount
	frame_dig -2 // assetAmount: uint64
	itxn_field AssetAmount

	// contracts\template.algo.ts:106
	// assetReceiver: assetReceiver
	frame_dig -3 // assetReceiver: Address
	itxn_field AssetReceiver

	// contracts\template.algo.ts:107
	// xferAsset: xferAsset
	frame_dig -1 // xferAsset: AssetID
	itxn_field XferAsset

	// contracts\template.algo.ts:108
	// note: note
	frame_dig -4 // note: string
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// bootstrap(uint64,pay,string,uint64,uint64,uint64)void
*abi_route_bootstrap:
	// fee: uint64
	txna ApplicationArgs 5
	btoi

	// start: uint64
	txna ApplicationArgs 4
	btoi

	// period: uint64
	txna ApplicationArgs 3
	btoi

	// id: string
	txna ApplicationArgs 2
	extract 2 0

	// txBaseDeposit: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// appPoolManager: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,pay,string,uint64,uint64,uint64)void
	callsub bootstrap
	int 1
	return

// bootstrap(appPoolManager: AppID, txBaseDeposit: PayTxn, id: string, period: uint64, start: uint64, fee: uint64): void
//
// Bootstrap the contract to optin to the fee asset and setup basic variables
//
// @param appPoolManager Tasks Pool manager app
// @param txBaseDeposit Deposit MBR
// @param id Hash id of the input app
// @param period  Period in seconds how often this smart contract can be run
// @param start Start time in unix timestamp seconds. Contract can be exectuted when Math.floor((currentTime + start) / period) > Math.floor((lastRun + start) / period)
// @param fee Execution fee for the task
bootstrap:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\template.algo.ts:130
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:131
	// verifyPayTxn(txBaseDeposit, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: 0 },
	//     })
	// verify receiver
	frame_dig -2 // txBaseDeposit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -2 // txBaseDeposit: PayTxn
	gtxns Amount
	int 0
	>=
	assert

	// contracts\template.algo.ts:136
	// keep = 100000
	int 100000
	frame_bury 0 // keep: uint64

	// *if0_condition
	// contracts\template.algo.ts:137
	// globals.minBalance > keep
	global MinBalance
	frame_dig 0 // keep: uint64
	>
	bz *if0_end

	// *if0_consequent
	// contracts\template.algo.ts:137
	// keep = globals.minBalance
	global MinBalance
	frame_bury 0 // keep: uint64

*if0_end:
	// contracts\template.algo.ts:141
	// task: Task = {
	//       app: globals.currentApplicationID,
	//       fee: fee,
	//       funds: 0,
	//     }
	byte 0x0000000000000000
	global CurrentApplicationID
	itob
	concat
	frame_dig -6 // fee: uint64
	itob
	concat
	frame_bury 1 // task: Task

	// contracts\template.algo.ts:147
	// sendMethodCall<[PayTxn, Task], void>({
	//       name: 'registerTask',
	//       methodArgs: [
	//         {
	//           amount: globals.currentApplicationAddress.balance - keep,
	//           note: 'reg',
	//           receiver: appPoolManager.address,
	//           fee: 0,
	//         },
	//         task,
	//       ],
	//       applicationID: appPoolManager,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\template.algo.ts:151
	// amount: globals.currentApplicationAddress.balance - keep
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_dig 0 // keep: uint64
	-
	itxn_field Amount

	// contracts\template.algo.ts:152
	// note: 'reg'
	byte 0x726567 // "reg"
	itxn_field Note

	// contracts\template.algo.ts:153
	// receiver: appPoolManager.address
	frame_dig -1 // appPoolManager: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\template.algo.ts:154
	// fee: 0
	int 0
	itxn_field Fee
	itxn_next
	int appl
	itxn_field TypeEnum
	method "registerTask(pay,(uint64,uint64,uint64))void"
	itxn_field ApplicationArgs

	// contracts\template.algo.ts:149
	// methodArgs: [
	//         {
	//           amount: globals.currentApplicationAddress.balance - keep,
	//           note: 'reg',
	//           receiver: appPoolManager.address,
	//           fee: 0,
	//         },
	//         task,
	//       ]
	frame_dig 1 // task: Task
	itxn_field ApplicationArgs

	// contracts\template.algo.ts:158
	// applicationID: appPoolManager
	frame_dig -1 // appPoolManager: AppID
	itxn_field ApplicationID

	// contracts\template.algo.ts:159
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\template.algo.ts:162
	// assert(period > 0)
	frame_dig -4 // period: uint64
	int 0
	>
	assert

	// contracts\template.algo.ts:163
	// this.id.value = id
	byte 0x6964 // "id"
	frame_dig -3 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts\template.algo.ts:164
	// this.period.value = period
	byte 0x70 // "p"
	frame_dig -4 // period: uint64
	app_global_put

	// contracts\template.algo.ts:165
	// this.start.value = start
	byte 0x73 // "s"
	frame_dig -5 // start: uint64
	app_global_put
	retsub

// sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPk: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	int 1
	return

// sendOnlineKeyRegistration(votePk: bytes, selectionPk: bytes, stateProofPk: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Creator can perfom key registration for this LP pool
sendOnlineKeyRegistration:
	proto 6 0

	// contracts\template.algo.ts:179
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:180
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPk,
	//       stateProofPK: stateProofPk,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePk,
	//       fee: 0,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\template.algo.ts:181
	// selectionPK: selectionPk
	frame_dig -2 // selectionPk: bytes
	itxn_field SelectionPK

	// contracts\template.algo.ts:182
	// stateProofPK: stateProofPk
	frame_dig -3 // stateProofPk: bytes
	itxn_field StateProofPK

	// contracts\template.algo.ts:183
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\template.algo.ts:184
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\template.algo.ts:185
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts\template.algo.ts:186
	// votePK: votePk
	frame_dig -1 // votePk: bytes
	itxn_field VotePK

	// contracts\template.algo.ts:187
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendOfflineKeyRegistration()void
*abi_route_sendOfflineKeyRegistration:
	// execute sendOfflineKeyRegistration()void
	callsub sendOfflineKeyRegistration
	int 1
	return

// sendOfflineKeyRegistration(): void
//
// Creator can perfom key unregistration for this LP pool
sendOfflineKeyRegistration:
	proto 0 0

	// contracts\template.algo.ts:195
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\template.algo.ts:196
	// sendOfflineKeyRegistration({ fee: 0 })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\template.algo.ts:196
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// exec()void
*abi_route_exec:
	// execute exec()void
	callsub exec
	int 1
	return

// exec(): void
//
// Anyone can execute this scheduler method when time is right and he will be rewarded the fee
exec:
	proto 0 0

	// contracts\template.algo.ts:203
	// assert(this.start.value <= globals.latestTimestamp, 'ERR_NO_START_YET')
	byte 0x73 // "s"
	app_global_get
	global LatestTimestamp
	<=

	// ERR_NO_START_YET
	assert

	// contracts\template.algo.ts:204
	// assert(
	//       (globals.latestTimestamp + this.start.value) / this.period.value >
	//         (this.lastRun.value + this.start.value) / this.period.value,
	//       'ERR_NO_TIME_YET'
	//     )
	global LatestTimestamp
	byte 0x73 // "s"
	app_global_get
	+
	byte 0x70 // "p"
	app_global_get
	/
	byte 0x6c // "l"
	app_global_get
	byte 0x73 // "s"
	app_global_get
	+
	byte 0x70 // "p"
	app_global_get
	/
	>

	// ERR_NO_TIME_YET
	assert

	// contracts\template.algo.ts:209
	// this.lastRun.value = globals.latestTimestamp
	byte 0x6c // "l"
	global LatestTimestamp
	app_global_put
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "setPeriod(uint64)void"
	method "payment(uint64,address,string)void"
	method "assetTransfer(uint64,uint64,address,string)void"
	method "bootstrap(uint64,pay,string,uint64,uint64,uint64)void"
	method "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "sendOfflineKeyRegistration()void"
	method "exec()void"
	txna ApplicationArgs 0
	match *abi_route_setPeriod *abi_route_payment *abi_route_assetTransfer *abi_route_bootstrap *abi_route_sendOnlineKeyRegistration *abi_route_sendOfflineKeyRegistration *abi_route_exec
	err

*call_UpdateApplication:
	method "updateApplication(string,string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication
	err