#pragma version 10

// This TEAL was generated by TEALScript v0.88.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64)void
*abi_route_createApplication:
	// offset: uint64
	txna ApplicationArgs 2
	btoi

	// period: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(period: uint64, offset: uint64): void
//
// Initial setup
// @param period  Period in seconds how often this smart contract can be run
// @param offset Offset in seconds. Contract can be exectuted when Math.floor((currentTime + offset) / period) > Math.floor((lastRun + offset) / period)
createApplication:
	proto 2 0

	// contracts\BiatecCronJobs.algo.ts:26
	// this.lastRun.value = 0
	byte 0x6c // "l"
	int 0
	app_global_put

	// contracts\BiatecCronJobs.algo.ts:27
	// assert(period > 0)
	frame_dig -1 // period: uint64
	int 0
	>
	assert

	// contracts\BiatecCronJobs.algo.ts:28
	// this.period.value = period
	byte 0x70 // "p"
	frame_dig -1 // period: uint64
	app_global_put

	// contracts\BiatecCronJobs.algo.ts:29
	// this.offset.value = offset
	byte 0x6f // "o"
	frame_dig -2 // offset: uint64
	app_global_put
	retsub

// execute()void
*abi_route_execute:
	// execute execute()void
	callsub execute
	int 1
	return

// execute(): void
//
// Initial setup
// @param period  Period in seconds how often this smart contract can be run
// @param offset Offset in seconds. Contract can be exectuted when Math.floor((currentTime + offset) / period) > Math.floor((lastRun + offset) / period)
execute:
	proto 0 0
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "execute()void"
	txna ApplicationArgs 0
	match *abi_route_execute
	err