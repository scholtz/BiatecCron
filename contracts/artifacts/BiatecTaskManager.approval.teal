#pragma version 10

// This TEAL was generated by TEALScript v0.90.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecTaskManager.algo.ts:38
	// this.version.value = 'BIATEC-CRON-POOL-01-01-01'
	byte 0x7363766572 // "scver"
	byte 0x00194249415445432d43524f4e2d504f4f4c2d30312d30312d3031
	app_global_put
	retsub

// updateApplication(string)void
*abi_route_updateApplication:
	// version: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string)void
	callsub updateApplication
	int 1
	return

// updateApplication(version: string): void
//
// Creator can update application
// @param version App version
updateApplication:
	proto 1 0

	// contracts\BiatecTaskManager.algo.ts:46
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:47
	// this.version.value = version
	byte 0x7363766572 // "scver"
	frame_dig -1 // version: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// bootstrap(pay,uint64)void
*abi_route_bootstrap:
	// feeAssetId: uint64
	txna ApplicationArgs 1
	btoi

	// txBaseDeposit: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute bootstrap(pay,uint64)void
	callsub bootstrap
	int 1
	return

// bootstrap(txBaseDeposit: PayTxn, feeAssetId: AssetID): void
//
// Bootstrap the contract to optin to the fee asset and setup basic variables
//
// @param txBaseDeposit Deposit MBR
// @param feeAssetId  Fee asset id
bootstrap:
	proto 2 0

	// contracts\BiatecTaskManager.algo.ts:57
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:59
	// verifyPayTxn(txBaseDeposit, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: 0 },
	//     })
	// verify receiver
	frame_dig -1 // txBaseDeposit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // txBaseDeposit: PayTxn
	gtxns Amount
	int 0
	>=
	assert

	// contracts\BiatecTaskManager.algo.ts:64
	// this.feeAssetId.value = feeAssetId.id
	byte 0x6661 // "fa"
	frame_dig -2 // feeAssetId: AssetID
	app_global_put

	// *if0_condition
	// contracts\BiatecTaskManager.algo.ts:77
	// this.feeAssetId.value > 0
	byte 0x6661 // "fa"
	app_global_get
	int 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts\BiatecTaskManager.algo.ts:78
	// sendAssetTransfer({
	//         assetReceiver: globals.currentApplicationAddress,
	//         assetAmount: 0,
	//         xferAsset: AssetID.fromUint64(this.feeAssetId.value),
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:79
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts\BiatecTaskManager.algo.ts:80
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts\BiatecTaskManager.algo.ts:81
	// xferAsset: AssetID.fromUint64(this.feeAssetId.value)
	byte 0x6661 // "fa"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// registerTask(pay,(uint64,uint64,uint64))void
*abi_route_registerTask:
	// task: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	int 24
	==
	assert

	// registrationFeeDeposit: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute registerTask(pay,(uint64,uint64,uint64))void
	callsub registerTask
	int 1
	return

// registerTask(registrationFeeDeposit: PayTxn, task: Task): void
//
// Register a task to be executed
// Only app it self can call register task
//
// @param registrationFeeDeposit The axfer or pay that deposits the initial funds
// @param task The task object
registerTask:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecTaskManager.algo.ts:94
	// assert(this.txn.sender === task.app.address)
	txn Sender
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:95
	// assert(task.funds === 0)
	frame_dig -2 // task: Task
	extract 0 8
	btoi
	int 0
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:97
	// verifyPayTxn(registrationFeeDeposit, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // registrationFeeDeposit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:100
	// assert(registrationFeeDeposit.amount > 500_000)
	frame_dig -1 // registrationFeeDeposit: PayTxn
	gtxns Amount
	int 500_000
	>
	assert

	// contracts\BiatecTaskManager.algo.ts:102
	// this.tasks(task.app).value = task
	byte 0x74 // "t"
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	itob
	concat
	frame_dig -2 // task: Task
	box_put

	// *if1_condition
	// contracts\BiatecTaskManager.algo.ts:103
	// this.user2tasks(task.app.creator).exists
	byte 0x75 // "u"
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	app_params_get AppCreator
	pop
	concat
	box_len
	swap
	pop
	bz *if1_else

	// *if1_consequent
	// contracts\BiatecTaskManager.algo.ts:104
	// this.user2tasks(task.app.creator).value.push(task.app)
	byte 0x75 // "u"
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	app_params_get AppCreator
	pop
	concat
	int 2
	int 0
	box_extract
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	itob
	concat
	byte 0x75 // "u"
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	app_params_get AppCreator
	pop
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	b *if1_end

*if1_else:
	// contracts\BiatecTaskManager.algo.ts:106
	// newWhitelist: AppID[] = [task.app]
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	itob
	frame_bury 0 // newWhitelist: AppID[]

	// contracts\BiatecTaskManager.algo.ts:107
	// this.user2tasks(task.app.creator).value = newWhitelist
	byte 0x75 // "u"
	frame_dig -2 // task: Task
	extract 8 8
	btoi
	app_params_get AppCreator
	pop
	concat
	dup
	box_del
	pop
	frame_dig 0 // newWhitelist: AppID[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*if1_end:
	retsub

// unregisterTask(uint64,uint64)void
*abi_route_unregisterTask:
	// indexToDelete: uint64
	txna ApplicationArgs 2
	btoi

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute unregisterTask(uint64,uint64)void
	callsub unregisterTask
	int 1
	return

// unregisterTask(app: AppID, indexToDelete: uint64): void
//
// Unregister a task when task is deleted
//
// @param app App to unregister
// @param indexToDelete App index to delete from user's apps
unregisterTask:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecTaskManager.algo.ts:118
	// assert(this.txn.sender === app.address)
	txn Sender
	frame_dig -1 // app: AppID
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:119
	// task = this.tasks(app).value
	byte 0x74 // "t"
	frame_dig -1 // app: AppID
	itob
	concat
	frame_bury 0 // storage key//task

	// *if2_condition
	// contracts\BiatecTaskManager.algo.ts:120
	// task.funds > 0
	int 0
	int 8
	byte 0x74 // "t"
	frame_dig -1 // app: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	int 0
	>
	bz *if2_end

	// *if2_consequent
	// contracts\BiatecTaskManager.algo.ts:121
	// sendAssetTransfer({
	//         assetAmount: task.funds,
	//         assetReceiver: app.creator,
	//         xferAsset: AssetID.fromUint64(this.feeAssetId.value),
	//         fee: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:122
	// assetAmount: task.funds
	int 0
	int 8
	byte 0x74 // "t"
	frame_dig -1 // app: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field AssetAmount

	// contracts\BiatecTaskManager.algo.ts:123
	// assetReceiver: app.creator
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts\BiatecTaskManager.algo.ts:124
	// xferAsset: AssetID.fromUint64(this.feeAssetId.value)
	byte 0x6661 // "fa"
	app_global_get
	itxn_field XferAsset

	// contracts\BiatecTaskManager.algo.ts:125
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// contracts\BiatecTaskManager.algo.ts:128
	// task.funds = 0
	frame_dig 0 // storage key//task
	int 0
	byte 0x0000000000000000
	box_replace

	// contracts\BiatecTaskManager.algo.ts:129
	// this.tasks(app).delete()
	byte 0x74 // "t"
	frame_dig -1 // app: AppID
	itob
	concat
	box_del

	// contracts\BiatecTaskManager.algo.ts:134
	// this.user2tasks(app.creator).value.splice(indexToDelete, 1)
	byte 0x75 // "u"
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	concat
	int 2
	int 0
	box_extract
	int 1
	frame_dig -2 // indexToDelete: uint64
	int 8
	*
	store 247 // splice start
	int 16
	store 246 // splice byte length
	byte 0x75 // "u"
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	concat
	int 2
	int 0
	box_extract
	int 0
	load 247 // splice start
	substring3
	byte 0x75 // "u"
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	concat
	int 2
	int 0
	box_extract
	dup
	len
	load 247 // splice start
	load 246 // splice byte length
	+
	int 8
	-
	swap
	substring3
	concat
	byte 0x75 // "u"
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	retsub

// executeTask(appl)void
*abi_route_executeTask:
	// taskAppCall: appl
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int appl
	==
	assert

	// execute executeTask(appl)void
	callsub executeTask
	int 1
	return

// executeTask(taskAppCall: AppCallTxn): void
//
// Execute a task and get the reward
//
// @param taskAppCall The call to the task app
executeTask:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecTaskManager.algo.ts:144
	// task = this.tasks(taskAppCall.applicationID).value
	byte 0x74 // "t"
	frame_dig -1 // taskAppCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	frame_bury 0 // storage key//task

	// *if3_condition
	// contracts\BiatecTaskManager.algo.ts:147
	// this.feeAssetId.value === 0
	byte 0x6661 // "fa"
	app_global_get
	int 0
	==
	bz *if3_else

	// *if3_consequent
	// contracts\BiatecTaskManager.algo.ts:148
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: task.fee,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:149
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\BiatecTaskManager.algo.ts:150
	// amount: task.fee
	int 16 // headOffset
	int 8
	byte 0x74 // "t"

	// contracts\BiatecTaskManager.algo.ts:144
	// taskAppCall.applicationID
	frame_dig -1 // taskAppCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if3_end

*if3_else:
	// contracts\BiatecTaskManager.algo.ts:153
	// sendAssetTransfer({
	//         assetReceiver: this.txn.sender,
	//         assetAmount: task.fee,
	//         xferAsset: AssetID.fromUint64(this.feeAssetId.value),
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:154
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\BiatecTaskManager.algo.ts:155
	// assetAmount: task.fee
	int 16 // headOffset
	int 8
	byte 0x74 // "t"

	// contracts\BiatecTaskManager.algo.ts:144
	// taskAppCall.applicationID
	frame_dig -1 // taskAppCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field AssetAmount

	// contracts\BiatecTaskManager.algo.ts:156
	// xferAsset: AssetID.fromUint64(this.feeAssetId.value)
	byte 0x6661 // "fa"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if3_end:
	// contracts\BiatecTaskManager.algo.ts:162
	// task.funds -= task.fee
	int 0
	dup
	int 8
	byte 0x74 // "t"

	// contracts\BiatecTaskManager.algo.ts:144
	// taskAppCall.applicationID
	frame_dig -1 // taskAppCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecTaskManager.algo.ts:162
	// task.fee
	int 16 // headOffset
	int 8
	byte 0x74 // "t"

	// contracts\BiatecTaskManager.algo.ts:144
	// taskAppCall.applicationID
	frame_dig -1 // taskAppCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	cover 2
	box_extract
	btoi
	-
	itob
	frame_dig 0 // storage key//task
	cover 2
	box_replace
	retsub

// fundTask(uint64,txn)void
*abi_route_fundTask:
	// deposit: txn
	txn GroupIndex
	int 1
	-

	// taskAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute fundTask(uint64,txn)void
	callsub fundTask
	int 1
	return

// fundTask(taskAppId: AppID, deposit: Txn): void
//
// Deposit funds for a task
//
// @param taskAppId The ID of the task to fund
// @param deposit The pay or axfer to fund the task
fundTask:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts\BiatecTaskManager.algo.ts:172
	// task = this.tasks(taskAppId).value
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	frame_bury 0 // storage key//task

	// *if4_condition
	// contracts\BiatecTaskManager.algo.ts:174
	// this.feeAssetId.value === 0
	byte 0x6661 // "fa"
	app_global_get
	int 0
	==
	bz *if4_else

	// *if4_consequent
	// contracts\BiatecTaskManager.algo.ts:175
	// verifyPayTxn(deposit, {
	//         receiver: this.app.address,
	//       })
	// verify pay
	frame_dig -2 // deposit: Txn
	gtxns TypeEnum
	int pay
	==
	assert

	// verify receiver
	frame_dig -2 // deposit: Txn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:178
	// fee = deposit.amount / 100
	frame_dig -2 // deposit: Txn
	gtxns Amount
	int 100
	/
	frame_bury 1 // fee: uint64

	// contracts\BiatecTaskManager.algo.ts:179
	// task.funds += deposit.amount - fee
	int 0
	dup
	int 8
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // deposit: Txn
	gtxns Amount
	frame_dig 1 // fee: uint64
	-
	+
	itob
	frame_dig 0 // storage key//task
	cover 2
	box_replace

	// contracts\BiatecTaskManager.algo.ts:180
	// this.depositedFunds.value += deposit.amount - fee
	byte 0x64 // "d"
	app_global_get
	frame_dig -2 // deposit: Txn
	gtxns Amount
	frame_dig 1 // fee: uint64
	-
	+
	byte 0x64 // "d"
	swap
	app_global_put
	b *if4_end

*if4_else:
	// contracts\BiatecTaskManager.algo.ts:182
	// verifyAssetTransferTxn(deposit, {
	//         assetReceiver: this.app.address,
	//         xferAsset: AssetID.fromUint64(this.feeAssetId.value),
	//       })
	// verify axfer
	frame_dig -2 // deposit: Txn
	gtxns TypeEnum
	int axfer
	==
	assert

	// verify assetReceiver
	frame_dig -2 // deposit: Txn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig -2 // deposit: Txn
	gtxns XferAsset
	byte 0x6661 // "fa"
	app_global_get
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:186
	// fee = deposit.amount / 100
	frame_dig -2 // deposit: Txn
	gtxns Amount
	int 100
	/
	frame_bury 2 // fee: uint64

	// contracts\BiatecTaskManager.algo.ts:187
	// task.funds += deposit.assetAmount - fee
	int 0
	dup
	int 8
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // deposit: Txn
	gtxns AssetAmount
	frame_dig 2 // fee: uint64
	-
	+
	itob
	frame_dig 0 // storage key//task
	cover 2
	box_replace

	// contracts\BiatecTaskManager.algo.ts:188
	// this.depositedFunds.value += deposit.assetAmount - fee
	byte 0x64 // "d"
	app_global_get
	frame_dig -2 // deposit: Txn
	gtxns AssetAmount
	frame_dig 2 // fee: uint64
	-
	+
	byte 0x64 // "d"
	swap
	app_global_put

*if4_end:
	retsub

// changeTaskFee(uint64,uint64)void
*abi_route_changeTaskFee:
	// fee: uint64
	txna ApplicationArgs 2
	btoi

	// taskAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeTaskFee(uint64,uint64)void
	callsub changeTaskFee
	int 1
	return

// changeTaskFee(taskAppId: AppID, fee: uint64): void
//
// Creator of the task is allowed to change the fee
//
// @param taskAppId The ID of the task to fund
// @param fee Fee in base units of the fee token
changeTaskFee:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecTaskManager.algo.ts:199
	// task = this.tasks(taskAppId).value
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	frame_bury 0 // storage key//task

	// contracts\BiatecTaskManager.algo.ts:200
	// assert(this.txn.sender === task.app.creator)
	txn Sender
	int 8 // headOffset
	int 8
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:201
	// task.fee = fee
	int 16 // headOffset
	frame_dig -2 // fee: uint64
	itob
	frame_dig 0 // storage key//task
	cover 2
	box_replace
	retsub

// unfundTask(uint64,uint64)void
*abi_route_unfundTask:
	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// taskAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute unfundTask(uint64,uint64)void
	callsub unfundTask
	int 1
	return

// unfundTask(taskAppId: AppID, amount: uint64): void
//
// Remove funds for a task
// Creator of the underlying task can remove the funds from the pool
//
// @param taskAppId The ID of the task to fund
// @param amount The amount to withdraw from the pool
unfundTask:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecTaskManager.algo.ts:212
	// task = this.tasks(taskAppId).value
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	frame_bury 0 // storage key//task

	// contracts\BiatecTaskManager.algo.ts:213
	// assert(this.txn.sender === task.app.creator)
	txn Sender
	int 8 // headOffset
	int 8
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:214
	// task.funds -= amount
	int 0
	dup
	int 8
	byte 0x74 // "t"
	frame_dig -1 // taskAppId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // amount: uint64
	-
	itob
	frame_dig 0 // storage key//task
	cover 2
	box_replace

	// contracts\BiatecTaskManager.algo.ts:215
	// this.depositedFunds.value -= amount
	byte 0x64 // "d"
	app_global_get
	frame_dig -2 // amount: uint64
	-
	byte 0x64 // "d"
	swap
	app_global_put

	// *if5_condition
	// contracts\BiatecTaskManager.algo.ts:216
	// this.feeAssetId.value === 0
	byte 0x6661 // "fa"
	app_global_get
	int 0
	==
	bz *if5_else

	// *if5_consequent
	// contracts\BiatecTaskManager.algo.ts:217
	// sendPayment({
	//         amount: amount,
	//         receiver: this.txn.sender,
	//         fee: 0,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:218
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// contracts\BiatecTaskManager.algo.ts:219
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\BiatecTaskManager.algo.ts:220
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if5_end

*if5_else:
	// contracts\BiatecTaskManager.algo.ts:223
	// sendAssetTransfer({
	//         assetAmount: amount,
	//         xferAsset: AssetID.fromUint64(this.feeAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         fee: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:224
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// contracts\BiatecTaskManager.algo.ts:225
	// xferAsset: AssetID.fromUint64(this.feeAssetId.value)
	byte 0x6661 // "fa"
	app_global_get
	itxn_field XferAsset

	// contracts\BiatecTaskManager.algo.ts:226
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\BiatecTaskManager.algo.ts:227
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if5_end:
	retsub

// payment(address,uint64,address,string)void
*abi_route_payment:
	// note: string
	txna ApplicationArgs 4
	extract 2 0

	// receiver: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute payment(address,uint64,address,string)void
	callsub payment
	int 1
	return

// payment(sender: Address, amount: uint64, receiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
//
// @param sender Sender. This app id or any rekeyed account to the address of this sc
// @param amount Amount
// @param note Note
// @param receiver Receiver
payment:
	proto 4 0

	// contracts\BiatecTaskManager.algo.ts:241
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// *if6_condition
	// contracts\BiatecTaskManager.algo.ts:242
	// this.feeAssetId.value === 0
	byte 0x6661 // "fa"
	app_global_get
	int 0
	==
	bz *if6_end

	// *if6_consequent
	// contracts\BiatecTaskManager.algo.ts:244
	// assert(globals.currentApplicationAddress.balance - amount >= this.depositedFunds.value)
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_dig -2 // amount: uint64
	-
	byte 0x64 // "d"
	app_global_get
	>=
	assert

*if6_end:
	// contracts\BiatecTaskManager.algo.ts:246
	// sendPayment({
	//       amount: amount,
	//       receiver: receiver,
	//       note: note,
	//       sender: sender,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:247
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// contracts\BiatecTaskManager.algo.ts:248
	// receiver: receiver
	frame_dig -3 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecTaskManager.algo.ts:249
	// note: note
	frame_dig -4 // note: string
	itxn_field Note

	// contracts\BiatecTaskManager.algo.ts:250
	// sender: sender
	frame_dig -1 // sender: Address
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetTransfer(address,uint64,uint64,address,string)void
*abi_route_assetTransfer:
	// note: string
	txna ApplicationArgs 5
	extract 2 0

	// assetReceiver: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// assetAmount: uint64
	txna ApplicationArgs 3
	btoi

	// xferAsset: uint64
	txna ApplicationArgs 2
	btoi

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute assetTransfer(address,uint64,uint64,address,string)void
	callsub assetTransfer
	int 1
	return

// assetTransfer(sender: Address, xferAsset: AssetID, assetAmount: uint64, assetReceiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
// @param sender Sender. This app id or any rekeyed account to the address of this sc
assetTransfer:
	proto 5 0

	// contracts\BiatecTaskManager.algo.ts:259
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// *if7_condition
	// contracts\BiatecTaskManager.algo.ts:260
	// this.feeAssetId.value === xferAsset.id
	byte 0x6661 // "fa"
	app_global_get
	frame_dig -2 // xferAsset: AssetID
	==
	bz *if7_end

	// *if7_consequent
	// contracts\BiatecTaskManager.algo.ts:262
	// assert(globals.currentApplicationAddress.assetBalance(xferAsset) - assetAmount >= this.depositedFunds.value)
	global CurrentApplicationAddress
	frame_dig -2 // xferAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -3 // assetAmount: uint64
	-
	byte 0x64 // "d"
	app_global_get
	>=
	assert

*if7_end:
	// contracts\BiatecTaskManager.algo.ts:264
	// sendAssetTransfer({
	//       assetAmount: assetAmount,
	//       assetReceiver: assetReceiver,
	//       xferAsset: xferAsset,
	//       note: note,
	//       assetSender: sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:265
	// assetAmount: assetAmount
	frame_dig -3 // assetAmount: uint64
	itxn_field AssetAmount

	// contracts\BiatecTaskManager.algo.ts:266
	// assetReceiver: assetReceiver
	frame_dig -4 // assetReceiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecTaskManager.algo.ts:267
	// xferAsset: xferAsset
	frame_dig -2 // xferAsset: AssetID
	itxn_field XferAsset

	// contracts\BiatecTaskManager.algo.ts:268
	// note: note
	frame_dig -5 // note: string
	itxn_field Note

	// contracts\BiatecTaskManager.algo.ts:269
	// assetSender: sender
	frame_dig -1 // sender: Address
	itxn_field AssetSender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPk: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	int 1
	return

// sendOnlineKeyRegistration(votePk: bytes, selectionPk: bytes, stateProofPk: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Creator can perfom key registration for this LP pool
sendOnlineKeyRegistration:
	proto 6 0

	// contracts\BiatecTaskManager.algo.ts:284
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:285
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPk,
	//       stateProofPK: stateProofPk,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePk,
	//       fee: 0,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:286
	// selectionPK: selectionPk
	frame_dig -2 // selectionPk: bytes
	itxn_field SelectionPK

	// contracts\BiatecTaskManager.algo.ts:287
	// stateProofPK: stateProofPk
	frame_dig -3 // stateProofPk: bytes
	itxn_field StateProofPK

	// contracts\BiatecTaskManager.algo.ts:288
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\BiatecTaskManager.algo.ts:289
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\BiatecTaskManager.algo.ts:290
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts\BiatecTaskManager.algo.ts:291
	// votePK: votePk
	frame_dig -1 // votePk: bytes
	itxn_field VotePK

	// contracts\BiatecTaskManager.algo.ts:292
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendOfflineKeyRegistration()void
*abi_route_sendOfflineKeyRegistration:
	// execute sendOfflineKeyRegistration()void
	callsub sendOfflineKeyRegistration
	int 1
	return

// sendOfflineKeyRegistration(): void
//
// Creator can perfom key unregistration for this LP pool
sendOfflineKeyRegistration:
	proto 0 0

	// contracts\BiatecTaskManager.algo.ts:300
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecTaskManager.algo.ts:301
	// sendOfflineKeyRegistration({ fee: 0 })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\BiatecTaskManager.algo.ts:301
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "bootstrap(pay,uint64)void"
	method "registerTask(pay,(uint64,uint64,uint64))void"
	method "unregisterTask(uint64,uint64)void"
	method "executeTask(appl)void"
	method "fundTask(uint64,txn)void"
	method "changeTaskFee(uint64,uint64)void"
	method "unfundTask(uint64,uint64)void"
	method "payment(address,uint64,address,string)void"
	method "assetTransfer(address,uint64,uint64,address,string)void"
	method "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "sendOfflineKeyRegistration()void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_registerTask *abi_route_unregisterTask *abi_route_executeTask *abi_route_fundTask *abi_route_changeTaskFee *abi_route_unfundTask *abi_route_payment *abi_route_assetTransfer *abi_route_sendOnlineKeyRegistration *abi_route_sendOfflineKeyRegistration
	err

*call_UpdateApplication:
	method "updateApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication
	err