/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "payment(address,uint64,address,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetTransfer(uint64,uint64,address,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(pay,string,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOfflineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exec()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "id": {
          "type": "bytes",
          "key": "id"
        },
        "lastRun": {
          "type": "uint64",
          "key": "l"
        },
        "period": {
          "type": "uint64",
          "key": "p"
        },
        "start": {
          "type": "uint64",
          "key": "s"
        },
        "fee": {
          "type": "uint64",
          "key": "f"
        },
        "feeToken": {
          "type": "uint64",
          "key": "ft"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecCronJob",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "Creator can update application",
        "args": [
          {
            "name": "version",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Creator can delete application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payment",
        "desc": "Creator can send pay/axfer transaction out of the smart contract",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount"
          },
          {
            "name": "receiver",
            "type": "address",
            "desc": "Receiver"
          },
          {
            "name": "note",
            "type": "string",
            "desc": "Note"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetTransfer",
        "desc": "Creator can send pay/axfer transaction out of the smart contract",
        "args": [
          {
            "name": "xferAsset",
            "type": "uint64"
          },
          {
            "name": "assetAmount",
            "type": "uint64"
          },
          {
            "name": "assetReceiver",
            "type": "address"
          },
          {
            "name": "note",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Bootstrap the contract to optin to the fee asset and setup basic variables",
        "args": [
          {
            "name": "txBaseDeposit",
            "type": "pay",
            "desc": "Deposit MBR"
          },
          {
            "name": "id",
            "type": "string",
            "desc": "Hash id of the input app"
          },
          {
            "name": "period",
            "type": "uint64",
            "desc": "Period in seconds how often this smart contract can be run"
          },
          {
            "name": "start",
            "type": "uint64",
            "desc": "Start time in unix timestamp seconds. Contract can be exectuted when Math.floor((currentTime + start) / period)>Math.floor((lastRun + start) / period)"
          },
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "Creator can perfom key registration for this LP pool",
        "args": [
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendOfflineKeyRegistration",
        "desc": "Creator can perfom key unregistration for this LP pool",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "exec",
        "desc": "Anyone can execute this scheduler method when time is right and he will be rewarded the fee",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the BiatecCronJob smart contract.
 */
export type BiatecCronJob = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication(byte[])void' | 'updateApplication', {
      argsObj: {
        version: Uint8Array
      }
      argsTuple: [version: Uint8Array]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'payment(address,uint64,address,string)void' | 'payment', {
      argsObj: {
        sender: string
        /**
         * Amount
         */
        amount: bigint | number
        /**
         * Receiver
         */
        receiver: string
        /**
         * Note
         */
        note: string
      }
      argsTuple: [sender: string, amount: bigint | number, receiver: string, note: string]
      returns: void
    }>
    & Record<'assetTransfer(uint64,uint64,address,string)void' | 'assetTransfer', {
      argsObj: {
        xferAsset: bigint | number
        assetAmount: bigint | number
        assetReceiver: string
        note: string
      }
      argsTuple: [xferAsset: bigint | number, assetAmount: bigint | number, assetReceiver: string, note: string]
      returns: void
    }>
    & Record<'bootstrap(pay,string,uint64,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        /**
         * Deposit MBR
         */
        txBaseDeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Hash id of the input app
         */
        id: string
        /**
         * Period in seconds how often this smart contract can be run
         */
        period: bigint | number
        /**
         * Start time in unix timestamp seconds. Contract can be exectuted when Math.floor((currentTime + start) / period)>Math.floor((lastRun + start) / period)
         */
        start: bigint | number
        fee: bigint | number
      }
      argsTuple: [txBaseDeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>, id: string, period: bigint | number, start: bigint | number, fee: bigint | number]
      returns: void
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: {
        votePk: Uint8Array
        selectionPk: Uint8Array
        stateProofPk: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'sendOfflineKeyRegistration()void' | 'sendOfflineKeyRegistration', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'exec()void' | 'exec', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'id'?: BinaryState
      'l'?: IntegerState
      'p'?: IntegerState
      's'?: IntegerState
      'f'?: IntegerState
      'ft'?: IntegerState
      'scver'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BiatecCronJobSig = keyof BiatecCronJob['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BiatecCronJobSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BiatecCronJob smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BiatecCronJobSig> = BiatecCronJob['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecCronJob smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecCronJobSig> = BiatecCronJob['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BiatecCronJobCreateCalls = (typeof BiatecCronJobCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BiatecCronJobCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type BiatecCronJobUpdateCalls = (typeof BiatecCronJobCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type BiatecCronJobUpdateCallParams =
  | TypedCallParams<'updateApplication(byte[])void'>
/**
 * A factory for available 'delete' calls
 */
export type BiatecCronJobDeleteCalls = (typeof BiatecCronJobCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type BiatecCronJobDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecCronJobDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BiatecCronJobCreateCalls) => BiatecCronJobCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: BiatecCronJobUpdateCalls) => BiatecCronJobUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: BiatecCronJobDeleteCalls) => BiatecCronJobDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BiatecCronJobCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BiatecCronJob smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the BiatecCronJob smart contract using the updateApplication(byte[])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication(byte[])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.version],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the BiatecCronJob smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the payment(address,uint64,address,string)void ABI method
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payment(args: MethodArgs<'payment(address,uint64,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'payment(address,uint64,address,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender, args.amount, args.receiver, args.note],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetTransfer(uint64,uint64,address,string)void ABI method
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetTransfer(args: MethodArgs<'assetTransfer(uint64,uint64,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetTransfer(uint64,uint64,address,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.xferAsset, args.assetAmount, args.assetReceiver, args.note],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(pay,string,uint64,uint64,uint64)void ABI method
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(pay,string,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(pay,string,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txBaseDeposit, args.id, args.period, args.start, args.fee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.votePk, args.selectionPk, args.stateProofPk, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendOfflineKeyRegistration()void ABI method
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendOfflineKeyRegistration()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the exec()void ABI method
   *
   * Anyone can execute this scheduler method when time is right and he will be rewarded the fee
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static exec(args: MethodArgs<'exec()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'exec()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BiatecCronJob smart contract
 */
export class BiatecCronJobClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BiatecCronJobClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BiatecCronJob['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BiatecCronJob smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BiatecCronJobDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BiatecCronJobCallFactory.create)
    const updateArgs = params.updateCall?.(BiatecCronJobCallFactory.update)
    const deleteArgs = params.deleteCall?.(BiatecCronJobCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BiatecCronJob smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BiatecCronJobCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the BiatecCronJob smart contract using the updateApplication(byte[])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication(byte[])void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(BiatecCronJobCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the BiatecCronJob smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(BiatecCronJobCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecCronJob smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the payment(address,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payment(args: MethodArgs<'payment(address,uint64,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.payment(args, params))
  }

  /**
   * Calls the assetTransfer(uint64,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetTransfer(args: MethodArgs<'assetTransfer(uint64,uint64,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.assetTransfer(args, params))
  }

  /**
   * Calls the bootstrap(pay,string,uint64,uint64,uint64)void ABI method.
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(pay,string,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.sendOnlineKeyRegistration(args, params))
  }

  /**
   * Calls the sendOfflineKeyRegistration()void ABI method.
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.sendOfflineKeyRegistration(args, params))
  }

  /**
   * Calls the exec()void ABI method.
   *
   * Anyone can execute this scheduler method when time is right and he will be rewarded the fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public exec(args: MethodArgs<'exec()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecCronJobCallFactory.exec(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BiatecCronJob['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get id() {
        return BiatecCronJobClient.getBinaryState(state, 'id')
      },
      get l() {
        return BiatecCronJobClient.getIntegerState(state, 'l')
      },
      get p() {
        return BiatecCronJobClient.getIntegerState(state, 'p')
      },
      get s() {
        return BiatecCronJobClient.getIntegerState(state, 's')
      },
      get f() {
        return BiatecCronJobClient.getIntegerState(state, 'f')
      },
      get ft() {
        return BiatecCronJobClient.getIntegerState(state, 'ft')
      },
      get scver() {
        return BiatecCronJobClient.getBinaryState(state, 'scver')
      },
    }
  }

  public compose(): BiatecCronJobComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      payment(args: MethodArgs<'payment(address,uint64,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetTransfer(args: MethodArgs<'assetTransfer(uint64,uint64,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetTransfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(pay,string,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendOnlineKeyRegistration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendOfflineKeyRegistration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      exec(args: MethodArgs<'exec()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.exec(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BiatecCronJobComposer
  }
}
export type BiatecCronJobComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the payment(address,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payment(args: MethodArgs<'payment(address,uint64,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'payment(address,uint64,address,string)void'>]>

  /**
   * Calls the assetTransfer(uint64,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransfer(args: MethodArgs<'assetTransfer(uint64,uint64,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'assetTransfer(uint64,uint64,address,string)void'>]>

  /**
   * Calls the bootstrap(pay,string,uint64,uint64,uint64)void ABI method.
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(pay,string,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'bootstrap(pay,string,uint64,uint64,uint64)void'>]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the sendOfflineKeyRegistration()void ABI method.
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'sendOfflineKeyRegistration()void'>]>

  /**
   * Calls the exec()void ABI method.
   *
   * Anyone can execute this scheduler method when time is right and he will be rewarded the fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  exec(args: MethodArgs<'exec()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, MethodReturn<'exec()void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecCronJob smart contract using the updateApplication(byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): BiatecCronJobComposer<[...TReturns, MethodReturn<'updateApplication(byte[])void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the BiatecCronJob smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): BiatecCronJobComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecCronJob smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecCronJobComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BiatecCronJobComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BiatecCronJobComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BiatecCronJobComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BiatecCronJobComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BiatecCronJobComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
